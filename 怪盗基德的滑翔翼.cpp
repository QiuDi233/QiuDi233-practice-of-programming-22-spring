/*描述
怪盗基德是一个充满传奇色彩的怪盗，专门以珠宝为目标的超级盗窃犯。而他最为突出的地方，
就是他每次都能逃脱中村警部的重重围堵，而这也很大程度上是多亏了他随身携带的便于操作的滑翔翼。

有一天，怪盗基德像往常一样偷走了一颗珍贵的钻石，不料却被柯南小朋友识破了伪装，
而他的滑翔翼的动力装置也被柯南踢出的足球破坏了。不得已，怪盗基德只能操作受损的滑翔翼逃脱。



假设城市中一共有N幢建筑排成一条线，每幢建筑的高度各不相同。初始时，怪盗基德可以在任何一幢建筑的顶端。
他可以选择一个方向逃跑，但是不能中途改变方向（因为中森警部会在后面追击）。
因为滑翔翼动力装置受损，他只能往下滑行（即：只能从较高的建筑滑翔到较低的建筑）。
他希望尽可能多地经过不同建筑的顶部，这样可以减缓下降时的冲击力，减少受伤的可能性。
请问，他最多可以经过多少幢不同建筑的顶部（包含初始时的建筑）？



输入
输入数据第一行是一个整数K（K < 100），代表有K组测试数据。
每组测试数据包含两行：第一行是一个整数N(N < 100)，代表有N幢建筑。第二行包含N个不同的整数，
每一个对应一幢建筑的高度h（0 < h < 10000），按照建筑的排列顺序给出。
输出
对于每一组测试数据，输出一行，包含一个整数，代表怪盗基德最多可以经过的建筑数量。
样例输入
3
8
300 207 155 299 298 170 158 65
8
65 158 170 298 299 155 207 300
10
2 1 3 4 5 6 7 8 9 10
样例输出
6
6
9*/

#include<iostream>
using namespace std;
int main() {
	int K = 0;
	cin >> K;
	int N = 0;//N栋建筑
	for(int t=0;t<K;++t){
		int h[105];
		cin >> N;
		for (int i = 0; i < N; ++i) {
			cin >> h[i];
		}
		//往左飞 即从左往右递增
		int dp[105];//以dp[i]为起点的最长
		for (int i = 0; i < N; ++i) {
			int m = 1;
			for (int j = i-1; j >= 0; --j) {
				if (h[i] > h[j]) {
					m = max(m, dp[j]+1);
				}
			}
			dp[i] = m;
		}
		//往右飞 即从右往左递增
		int dp2[105];//以dp[i]为起点的最长
		for (int i = N-1; i>=0; --i) {
			int m = 1;
			for (int j = i + 1; j <N; ++j) {
				if (h[i] > h[j]) {
					m = max(m, dp2[j] + 1);
				}
			}
			dp2[i] = m;
		}
		int M = 0;
		for (int i = 0; i < N; ++i) {
			M = max(M, dp[i]);
			M = max(M, dp2[i]);
		}
		cout << M << endl;
	}
	return 0;
}


